{"id":"node_modules/xstate/lib/Actor.js","dependencies":[{"name":"/Users/braflow/fantasy/package.json","includedInParent":true,"mtime":1587836975236},{"name":"/Users/braflow/fantasy/node_modules/xstate/package.json","includedInParent":true,"mtime":1587827886739}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createNullActor(id) {\n    return {\n        id: id,\n        send: function () { return void 0; },\n        subscribe: function () { return ({\n            unsubscribe: function () { return void 0; }\n        }); },\n        toJSON: function () { return ({\n            id: id\n        }); }\n    };\n}\nexports.createNullActor = createNullActor;\n/**\n * Creates a null actor that is able to be invoked given the provided\n * invocation information in its `.meta` value.\n *\n * @param invokeDefinition The meta information needed to invoke the actor.\n */\nfunction createInvocableActor(invokeDefinition) {\n    var tempActor = createNullActor(invokeDefinition.id);\n    tempActor.meta = invokeDefinition;\n    return tempActor;\n}\nexports.createInvocableActor = createInvocableActor;\nfunction isActor(item) {\n    try {\n        return typeof item.send === 'function';\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isActor = isActor;\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/xstate/lib/Actor.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/xstate/lib/Actor.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}}],"sources":{"node_modules/xstate/lib/Actor.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction createNullActor(id) {\n    return {\n        id: id,\n        send: function () { return void 0; },\n        subscribe: function () { return ({\n            unsubscribe: function () { return void 0; }\n        }); },\n        toJSON: function () { return ({\n            id: id\n        }); }\n    };\n}\nexports.createNullActor = createNullActor;\n/**\n * Creates a null actor that is able to be invoked given the provided\n * invocation information in its `.meta` value.\n *\n * @param invokeDefinition The meta information needed to invoke the actor.\n */\nfunction createInvocableActor(invokeDefinition) {\n    var tempActor = createNullActor(invokeDefinition.id);\n    tempActor.meta = invokeDefinition;\n    return tempActor;\n}\nexports.createInvocableActor = createInvocableActor;\nfunction isActor(item) {\n    try {\n        return typeof item.send === 'function';\n    }\n    catch (e) {\n        return false;\n    }\n}\nexports.isActor = isActor;\n"},"lineCount":37}},"error":null,"hash":"3f70c7f3847a4a9205810b535c7883b1","cacheData":{"env":{}}}